# -*- coding: utf-8 -*-
"""TelecomX_BR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D09hrEL1pVHAlBTpfo4QbkrmpnynQWPC

#üìå Extrac√£o
"""

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

# 1Ô∏è‚É£ Carregar dados
url = "https://raw.githubusercontent.com/alura-cursos/challenge2-data-science/refs/heads/main/TelecomX_Data.json"
df = pd.read_json(url)

# Expandir colunas aninhadas
df_customer = pd.json_normalize(df["customer"])
df_phone = pd.json_normalize(df["phone"])
df_internet = pd.json_normalize(df["internet"])
df_account = pd.json_normalize(df["account"])

# Juntar tudo
df_expanded = pd.concat([
    df.drop(columns=["customer", "phone", "internet", "account"]),
    df_customer,
    df_phone,
    df_internet,
    df_account
], axis=1)

print("‚úÖ Colunas dispon√≠veis:", df_expanded.columns.tolist())

# Agora podemos acessar tenure, TotalCharges e Churn Reason
# Tratar dados
df_expanded.fillna({"Churn Reason": "N√£o informado"}, inplace=True)

df = pd.json_normalize(df.to_dict(orient="records"))

df = df.applymap(lambda x: str(x) if isinstance(x, (dict, list)) else x)

df.drop_duplicates(inplace=True)

print("‚úÖ Dados carregados e normalizados!")

print(df.head())

print(df.info())

"""#üîß Transforma√ß√£o"""

df.drop_duplicates(inplace=True)

#Agora podemos acessar tenure, TotalCharges e Churn Reason
# Tratar dados
df_expanded.fillna({"Churn Reason": "N√£o informado"}, inplace=True)

df_expanded["tenure"] = pd.to_numeric(df_expanded["tenure"], errors="coerce").fillna(0).astype(int)

df_expanded["Charges.Total"] = pd.to_numeric(df_expanded["Charges.Total"], errors="coerce").fillna(0)

print(df.columns.tolist())

# Padronizar nomes (min√∫sculo e sem espa√ßos/pontos)
df_expanded.columns = df_expanded.columns.str.lower().str.strip().str.replace(" ", "_").str.replace(".", "_")

# 5Ô∏è‚É£ Tratar dados num√©ricos
df_expanded["charges_total"] = pd.to_numeric(df_expanded["charges_total"], errors="coerce").fillna(0)
df_expanded["tenure"] = pd.to_numeric(df_expanded["tenure"], errors="coerce").fillna(0).astype(int)

# Agora a coluna vira TotalCharges
df["account.Charges.Total"] = pd.to_numeric(df["account.Charges.Total"], errors="coerce").fillna(0)

# Garantir tipos corretos
df["account.Charges.Total"] = pd.to_numeric(df["account.Charges.Total"], errors="coerce").fillna(0)
df["customer.tenure"] = pd.to_numeric(df["customer.tenure"], errors="coerce").fillna(0).astype(int)

# Criar ticket m√©dio
df_expanded["Ticket M√©dio"] = df_expanded["charges_total"] / df_expanded["tenure"]
df_expanded["Ticket M√©dio"] = df_expanded["Ticket M√©dio"].replace([float("inf"), -float("inf")], 0)



bins = [0, 6, 12, 24, 36, 48, 60, df_expanded["tenure"].max()]
labels = ["0-6m", "7-12m", "13-24m", "25-36m", "37-48m", "49-60m", "60m+"]
df_expanded["Faixa_Tempo_Cliente"] = pd.cut(df_expanded["tenure"], bins=bins, labels=labels)

"""#üìä Carga e an√°lise"""

df_expanded = pd.concat([
    df,
    df_customer,
    df_phone,
    df_internet,
    df_account
], axis=1)

# Converter colunas para num√©rico antes de calcular o Ticket M√©dio
df_expanded["Charges.Total"] = pd.to_numeric(df_expanded["Charges.Total"], errors="coerce").fillna(0)
df_expanded["tenure"] = pd.to_numeric(df_expanded["tenure"], errors="coerce").fillna(0).astype(int)


# Criar ticket m√©dio
df_expanded["Ticket M√©dio"] = df_expanded["Charges.Total"] / df_expanded["tenure"]
df_expanded["Ticket M√©dio"] = df_expanded["Ticket M√©dio"].replace([float("inf"), -float("inf")], 0)

sns.set(style="whitegrid")

# --- Taxa de churn
churn_rate = df["Churn"].value_counts(normalize=True) * 100
print("\nüìä Taxa de Churn (%):")
print(churn_rate)

# --- Gr√°fico 1: Churn por tipo de contrato
plt.figure(figsize=(6,4))
sns.countplot(data=df, x="account.Contract", hue="Churn", palette="Set2")
plt.title("Churn por Tipo de Contrato")
plt.show()

# --- Gr√°fico 2: Distribui√ß√£o do tempo de cliente
plt.figure(figsize=(6,4))
sns.histplot(data=df, x="customer.tenure", hue="Churn", multiple="stack", palette="coolwarm", bins=20)
plt.title("Distribui√ß√£o do Tempo de Cliente x Churn")
plt.show()

# --- Gr√°fico 3: Ticket m√©dio
plt.figure(figsize=(6,4))
sns.boxplot(data=df_expanded, x="Churn", y="Ticket M√©dio", palette="pastel")
plt.title("Ticket M√©dio x Churn")
plt.show()

print(df.columns.tolist())

# Churn por tipo de contrato
if "contract" in df_expanded.columns:
    plt.figure(figsize=(6,4))
    sns.countplot(data=df_expanded, x="contract", hue="churn", palette="Set2")
    plt.title("Churn por Tipo de Contrato")
    plt.show()

# Churn por servi√ßo de internet
if "internetservice" in df_expanded.columns:
    plt.figure(figsize=(6,4))
    sns.countplot(data=df_expanded, x="internetservice", hue="churn", palette="coolwarm")
    plt.title("Churn por Tipo de Servi√ßo de Internet")
    plt.show()

# Distribui√ß√£o do tempo de cliente x Churn
plt.figure(figsize=(6,4))
sns.histplot(data=df_expanded, x="tenure", hue="Churn", multiple="stack", bins=20, palette="pastel")
plt.title("Distribui√ß√£o do Tempo de Cliente x Churn")
plt.show()

# Ticket m√©dio x Churn
plt.figure(figsize=(6,4))
sns.boxplot(data=df_expanded, x="Churn", y="Ticket M√©dio", palette="muted")
plt.title("Ticket M√©dio x Churn")
plt.show()

"""#üìÑRelatorio Final

> Adicionar aspas


"""



plt.figure(figsize=(8, 5))
sns.countplot(data=df_expanded, x="account.PaymentMethod", hue="Churn", palette="pastel")
plt.title("Churn por M√©todo de Pagamento")
plt.xlabel("M√©todo de Pagamento")
plt.ylabel("Contagem")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

print("\nüí° INSIGHTS ESTRAT√âGICOS:")

print(f"- Taxa de churn total: {churn_rate['Yes']:.2f}%")

print("- Clientes com contrato mensal apresentam maior risco de evas√£o.")

print("- Grande parte dos cancelamentos ocorre at√© 12 meses de contrato.")

print("- Ticket m√©dio mais alto est√° relacionado a maior chance de churn.")

print("- 'Pre√ßo mais alto' √© o motivo de cancelamento mais recorrente.")

"""# **`An√°lise de Correla√ß√£o entre Vari√°veis`**"""

# 1. Criar uma c√≥pia para n√£o afetar o original
df_corr = df_expanded.copy()

# 2. Codificar Churn como vari√°vel num√©rica
df_corr["Churn_num"] = df_corr["Churn"].map({"Yes": 1, "No": 0})

# 3. Selecionar apenas colunas num√©ricas
df_corr_numeric = df_corr.select_dtypes(include=["int64", "float64"])

# 4. Incluir a vari√°vel Churn codificada
if "Churn_num" not in df_corr_numeric.columns:
    df_corr_numeric["Churn_num"] = df_corr["Churn_num"]

# 5. Calcular correla√ß√£o
correlation_matrix = df_corr_numeric.corr()

# 6. Exibir o mapa de calor
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("üìà Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas")
plt.show()

"""üß† Como interpretar:
Valores pr√≥ximos de +1 indicam correla√ß√£o positiva forte.

Valores pr√≥ximos de -1 indicam correla√ß√£o negativa forte.

Valores pr√≥ximos de 0 indicam baixa ou nenhuma correla√ß√£o.

Olhe principalmente a coluna Churn_num para ver quais vari√°veis se relacionam mais com a evas√£o.

```
# Isto est√° formatado como c√≥digo
```

"""